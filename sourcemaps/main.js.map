{"version":3,"sources":["main.coffee"],"names":[],"mappings":"AAIA;AAAA,MAAA;;EAAA,QAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,MAAA,GAA4B,OAAA,CAAQ,IAAR;;EAE5B,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,GAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd;;EAE5B,OAAA,GAA4B,OAAA,CAAQ,oBAAR;;EAC5B,IAAA,GAA4B,OAAO,CAAC;;EAEpC,CAAA,GAA4B,OAAA,CAAQ,YAAR;;EAC5B,CAAA,GAA4B,CAAC,CAAC,KAAK,CAAC,IAAR,CAAa,CAAb;;EAC5B,MAAA,GAA4B,CAAC,CAAC,WAAW,CAAC,IAAd,CAAmB,CAAnB;;EAW5B,KAAA,CAAM,QAAN,EAAgB,MAAM,CAAC,IAAP,CAAY,MAAM,CAAC,IAAnB,CAAhB;;EACA,KAAA,CAAM,QAAN,EAAgB,MAAM,CAAC,IAAP,CAAY,IAAZ,CAAhB;;EACA,IAAC,CAAA,GAAD,GAAO;AAlCP","file":"main.js","sourceRoot":"/source/","sourcesContent":["\n\n\n############################################################################################################\nnjs_path                  = require 'path'\nnjs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MKTS/JIZURA/main'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nsuspend                   = require 'coffeenode-suspend'\nstep                      = suspend.step\n#...........................................................................................................\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n$async                    = D.remit_async.bind D\n#...........................................................................................................\n# ASYNC                     = require 'async'\n#...........................................................................................................\n# ƒ                         = CND.format_number.bind CND\n# HELPERS                   = require './helpers'\n# TEXLIVEPACKAGEINFO        = require './texlivepackageinfo'\n# options_route             = '../options.coffee'\n# { CACHE, OPTIONS, }       = require './options'\n# SEMVER                    = require 'semver'\n#...........................................................................................................\ndebug '©70785', Object.keys global.MKTS\ndebug '©70785', Object.keys MKTS\n@foo = 42\n# MKTS                      = require.main.require 'mingkwai-typesetter'\n# MKTSCRIPT_WRITER          = require './mktscript-writer'\n\n\n# hide                      = MKTS.MD_READER.hide.bind        MKTS.MD_READER\n# copy                      = MKTS.MD_READER.copy.bind        MKTS.MD_READER\n# stamp                     = MKTS.MD_READER.stamp.bind       MKTS.MD_READER\n# unstamp                   = MKTS.MD_READER.unstamp.bind     MKTS.MD_READER\n# select                    = MKTS.MD_READER.select.bind      MKTS.MD_READER\n# is_hidden                 = MKTS.MD_READER.is_hidden.bind   MKTS.MD_READER\n# is_stamped                = MKTS.MD_READER.is_stamped.bind  MKTS.MD_READER\n# # MACRO_ESCAPER             = require './macro-escaper'\n# # LINEBREAKER               = require './linebreaker'\n# HOLLERITH                 = require 'hollerith'\n\n\n# #-----------------------------------------------------------------------------------------------------------\n# @$main = ( S ) =>\n#   db_route        = njs_path.resolve __dirname, '../../jizura-datasources/data/leveldb-v2'\n#   S.JZR          ?= {}\n#   if S.JZR.db?\n#     help \"re-using DB connection to DB at #{db_route}\"\n#   else\n#     warn \"establishing new DB connection to DB at #{db_route}\"\n#     S.JZR.db = HOLLERITH.new_db db_route, create: no\n#   debug '©52564', Object.keys S.JZR.db\n#   #.........................................................................................................\n#   return D.TEE.from_pipeline [\n#     @$fontlist                                    S\n#     #.......................................................................................................\n#     @$most_frequent.with_fncrs.$rewrite_events    S\n#     @$dump_db                                     S\n#     @$most_frequent.$read                         S\n#     @$most_frequent.$assemble                     S\n#     @$most_frequent.$details_from_glyphs          S\n#     @$most_frequent.with_fncrs.$format            S\n#     @$most_frequent.with_fncrs.$assemble          S\n#     @$dump_db.$format                             S\n#     #.......................................................................................................\n#     @$py                                          S\n#     ]\n\n# #-----------------------------------------------------------------------------------------------------------\n# @$fontlist = ( S ) =>\n#   kaishu_shortnames = [\n#     'Fandolkairegular'\n#     'Kai'\n#     'Ukai'\n#     'Epkaisho'\n#     'Cwtexqkaimedium'\n#     'Biaukai'\n#     ]\n#   kana_shortnames = [\n#     'Babelstonehan'\n#     'Cwtexqfangsongmedium'\n#     'Cwtexqheibold'\n#     'Cwtexqkaimedium'\n#     'Cwtexqmingmedium'\n#     'Cwtexqyuanmedium'\n#     'Hanamina'\n#     'Sunexta'\n#     'Kai'\n#     'Nanumgothic'\n#     'Nanummyeongjo'\n#     'Simsun'\n#     'Fandolfangregular'\n#     'Fandolheibold'\n#     'Fandolheiregular'\n#     'Fandolkairegular'\n#     'Fandolsongbold'\n#     'Fandolsongregular'\n#     'Ipaexg'\n#     'Ipaexm'\n#     'Ipag'\n#     'Ipagp'\n#     'Ipam'\n#     'Ipamp'\n#     'Ipaexg'\n#     'Ipaexm'\n#     'Ipag'\n#     'Ipagp'\n#     'Ipam'\n#     'Ipamp'\n#     'Ukai'\n#     'Uming'\n#     'Droidsansfallbackfull'\n#     'Droidsansjapanese'\n#     'Fontsjapanesegothic'\n#     'Fontsjapanesemincho'\n#     'Takaopgothic'\n#     'Sourcehansansbold'\n#     'Sourcehansansextralight'\n#     'Sourcehansansheavy'\n#     'Sourcehansanslight'\n#     'Sourcehansansmedium'\n#     'Sourcehansansnormal'\n#     'Sourcehansansregular'\n#     ]\n#   #.........................................................................................................\n#   template = \"\"\"\n#     ($shortname) {\\\\($texname){\\\\cjk\\\\($texname){}ぁあぃいぅうぇえぉおかがきぎく\n#     ぐけげこごさざしじすずせぜそぞた\n#     だちぢっつづてでとどなにぬねのは\n#     ばぱひびぴふぶぷへべぺほぼぽまみ\n#     むめもゃやゅゆょよらりるれろゎわ\n#     ゐゑをんゔゕゖァアィイゥウェエォオカガキギク\n#     グケゲコゴサザシジスズセゼソゾタ\n#     ダチヂッツヅテデトドナニヌネノハ\n#     バパヒビピフブプヘベペホボポマミ\n#     ムメモャヤュユョヨラリルレロヮワ\n#     ヰヱヲンヴヵヶヷヸヹヺ\n#     本书使用的数字，符号一览表}\n#     AaBbCcDdEeFfghijklmn}\n#     \"\"\"\n#   #.........................................................................................................\n#   template = \"\"\"\n#     This is {\\\\cjk\\\\($texname){}むず·かしい} so very {\\\\cjk\\\\($texname){}ムズ·カシイ} indeed.\n#     \"\"\"\n#   #.........................................................................................................\n#   template = \"\"\"\n#     XXX{\\\\($texname){}·}XXX\n#     \"\"\"\n#   #.........................................................................................................\n#   template = \"\"\"\n#     The character {\\\\cjk{}出} {\\\\($texname){}u{\\\\mktsFontfileEbgaramondtwelveregular{}·}cjk{\\\\mktsFontfileEbgaramondtwelveregular{}·}51fa} means '{\\\\mktsStyleItalic{}go out, send out, stand, produce}'.\n#     \"\"\"\n#   #.........................................................................................................\n#   template = \"\"\"\n#     {\\\\($texname){}出 、出。出〃出〄出々出〆出〇出〈出〉出《出》出「出」出}\\\\\\\\\n#     \\\\> {\\\\($texname){}出『出』出【出】出〒出〓出〔出〕出〖出〗出〘出〙出〚出}\n#     \"\"\"\n#   #.........................................................................................................\n#   template = \"\"\"\n#     {\\\\($texname){}abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ}\n#     \"\"\"\n#   #.........................................................................................................\n#   template = \"\"\"\n#     {\\\\($texname){\\\\cjk\\\\($texname){}本书使用的数字，符号一览表書覽} AaBbCcDdEeFfghijklmnopqrstuvwxyz}\n#     \"\"\"\n#   #.........................................................................................................\n#   return $ ( event, send ) =>\n#     #.......................................................................................................\n#     if select event, '!', 'JZR.fontlist'\n#       send stamp event\n#       #.....................................................................................................\n#       send [ 'tex', \"\\\\begin{tabbing}\\n\" ]\n#       send [ 'tex', \"\\\\phantom{XXXXXXXXXXXXXXXXXXXXXXXXX} \\\\= \\\\phantom{XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX} \\\\\\\\\\n\" ]\n#       #.....................................................................................................\n#       for { texname, } in S.options[ 'fonts' ][ 'files' ]\n#         shortname = texname.replace /^mktsFontfile/, ''\n#         # continue unless shortname in kana_shortnames\n#         raw       = template\n#         raw       = raw.replace /\\(\\$texname\\)/g,    texname\n#         raw       = raw.replace /\\(\\$shortname\\)/g,  shortname\n#         # send [ '.', 'text', \"#{shortname}\\\\\\\\\\n\", ]\n#         send [ 'tex', \"#{shortname} \\\\> #{raw} \\\\\\\\\\n\", ]\n#       #.....................................................................................................\n#       send [ 'tex', \"\\\\end{tabbing}\\n\" ]\n#     #.......................................................................................................\n#     else\n#       send event\n\n# #-----------------------------------------------------------------------------------------------------------\n# @$most_frequent             = {}\n# @$most_frequent.with_fncrs  = {}\n\n# #-----------------------------------------------------------------------------------------------------------\n# @$most_frequent.with_fncrs.$rewrite_events = ( S ) =>\n#   return $ ( event, send ) =>\n#     if select event, '!', 'JZR.most_frequent.with_fncrs'\n#       [ _, _, parameters, meta ]    = event\n#       meta[ 'jzr' ]?=                 {}\n#       meta[ 'jzr' ][ 'group-name' ] = 'glyphs-with-fncrs'\n#       send [ '!', 'JZR.most_frequent', parameters, meta, ]\n#     else\n#       send event\n\n# #-----------------------------------------------------------------------------------------------------------\n# @$most_frequent.$read = ( S ) =>\n#   HOLLERITH_DEMO  = require '../../hollerith/lib/demo'\n#   defaults        =\n#     n:            100\n#     group_name:   'glyphs'\n#   #.........................................................................................................\n#   return D.remit_async_spread ( event, send ) =>\n#     return send.done event unless select event, '!', 'JZR.most_frequent'\n#     [ type, name, [ n ], meta, ]  = event\n#     n                            ?= defaults.n\n#     group_name                    = meta[ 'jzr' ]?[ 'group-name' ] ? defaults.group_name\n#     #.......................................................................................................\n#     step ( resume ) =>\n#       #.....................................................................................................\n#       try\n#         glyphs = yield HOLLERITH_DEMO.read_sample S.JZR.db, n, resume\n#       #.....................................................................................................\n#       catch error\n#         warn error\n#         return send.error error\n#       #.....................................................................................................\n#       send stamp event\n#       glyphs = Object.keys glyphs\n#       send [ '(', group_name, null, ( copy meta ), ]\n#       for glyph in glyphs\n#         send [ '.', 'glyph', glyph, ( copy meta ), ]\n#       send [ ')', group_name, null, ( copy meta ), ]\n#       send.done()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @$most_frequent.$assemble = ( S ) =>\n#   track = MD_READER.TRACKER.new_tracker '(glyphs)'\n#   #.........................................................................................................\n#   return $ ( event, send ) =>\n#     within_glyphs = track.within '(glyphs)'\n#     track event\n#     #.......................................................................................................\n#     if select event, '(', 'glyphs'\n#       send stamp event\n#     #.......................................................................................................\n#     else if within_glyphs and select event, '.', 'glyph'\n#       # glyphs = ( ( if idx % 40 is 0 then \"#{glyph}\\n\" else glyph ) for glyph, idx in glyphs )\n#       # glyphs = glyphs. join ''\n#       [ _, _, glyph, meta, ] = event\n#       send [ '.', 'text', glyph, ( copy meta ), ]\n#     #.......................................................................................................\n#     else if select event, ')', 'glyphs'\n#       send stamp event\n#     #.......................................................................................................\n#     else\n#       send event\n\n# #-----------------------------------------------------------------------------------------------------------\n# @$most_frequent.$details_from_glyphs = ( S ) =>\n#   # track     = MD_READER.TRACKER.new_tracker '(glyphs-with-fncrs)'\n#   HOLLERITH = require '../../hollerith'\n#   #.........................................................................................................\n#   return D.remit_async_spread ( event, send ) =>\n#     # within_glyphs = track.within '(glyphs-with-fncrs)'\n#     # track event\n#     #.......................................................................................................\n#     if select event, '.', 'glyph'\n#       [ _, _, glyph, meta, ]  = event\n#       prefix                  = [ 'spo', glyph, ] # 'cp/sfncr'\n#       HOLLERITH.read_phrases S.JZR.db, { prefix, }, ( error, phrases ) =>\n#         details = { glyph, }\n#         for phrase in phrases\n#           [ _, _, prd, obj, ] = phrase\n#           details[ prd ] = obj\n#         send [ '.', 'details', details, ( copy meta ), ]\n#         send.done()\n#     #.......................................................................................................\n#     else\n#       send.done event\n\n# #-----------------------------------------------------------------------------------------------------------\n# @$most_frequent.with_fncrs.$format = ( S ) =>\n#   track         = MD_READER.TRACKER.new_tracker '(glyphs-with-fncrs)'\n#   this_glyph    = null\n#   reading_keys  = [ 'reading/py', 'reading/hg', 'reading/ka', 'reading/hi', ]\n#   has_readings  = ( x ) -> ( CND.isa_list x ) and ( x.length > 0 )\n#   has_gloss     = ( x ) -> ( CND.isa_text x ) and ( x.length > 0 )\n#   #.........................................................................................................\n#   return $ ( event, send ) =>\n#     within_glyphs   = track.within '(glyphs-with-fncrs)'\n#     track event\n#     #.......................................................................................................\n#     if within_glyphs and select event, '.', 'details'\n#       [ _, _, details, meta, ]  = event\n#       #.....................................................................................................\n#       for prd in reading_keys\n#         #...................................................................................................\n#         if has_readings ( readings = details[ prd ] )\n#           if prd in [ 'reading/ka', 'reading/hi', ]\n#             readings = ( reading.replace /-/g, '⋯' for reading in readings )\n#           details[ prd ] = readings.join ', \\n'\n#       #.....................................................................................................\n#       if has_gloss ( gloss = details[ 'reading/gloss' ] )\n#         details[ 'reading/gloss' ]  = gloss.replace /;/g, ','\n#       #.....................................................................................................\n#       send event\n#     #.......................................................................................................\n#     else\n#       send event\n\n# #-----------------------------------------------------------------------------------------------------------\n# @$most_frequent.with_fncrs.$assemble = ( S ) =>\n#   track       = MD_READER.TRACKER.new_tracker '(glyphs-with-fncrs)'\n#   this_glyph  = null\n#   #.........................................................................................................\n#   return $ ( event, send ) =>\n#     within_glyphs   = track.within '(glyphs-with-fncrs)'\n#     track event\n#     #.......................................................................................................\n#     if select event, '(', 'glyphs-with-fncrs'\n#       [ _, _, this_glyph, _, ] = event\n#       send stamp event\n#       send [ 'tex', '{\\\\setlength\\\\parskip{0mm}\\n', ]\n#     #.......................................................................................................\n#     else if select event, ')', 'glyphs-with-fncrs'\n#       this_glyph = null\n#       send stamp event\n#       send [ 'tex', '}\\n\\n']\n#     #.......................................................................................................\n#     else if within_glyphs and select event, '.', 'details'\n#       [ _, _, details, meta, ] = event\n#       send [ 'tex', \"\\\\begin{tabular}{ | @{} p{20mm} @{} | @{} l @{} | @{} p{1mm} @{} | @{} p{60mm} @{} | }\\n\", ]\n#       # send [ 'tex', \"\\\\begin{tabular}{ | @{} l @{} | @{} p{1mm} @{} | @{} p{60mm} @{} | }\\n\", ]\n#       #.....................................................................................................\n#       # GUIDES\n#       #.....................................................................................................\n#       value = details[ 'guide/kwic/v3/sortcode' ]\n#       # if value? and value.length > 0\n#       value = value[ 0 ]\n#       # [ [ '1293f---', '1217f---', null ], '女', [ '子' ], [] ]\n#       [ _, infix, suffix, prefix, ] = value\n#       unless prefix.length is 0\n#         throw new Error \"expected empty prefix, got #{glyph} #{rpr value}\"\n#       # send [ 'tex', \"{\\\\mktsStyleGuides{}\", ]\n#       value = infix + suffix.join ''\n#       send [ '.', 'text', value, ( copy meta ), ]\n#       # send [ 'tex', \"}\", ]\n#       #.....................................................................................................\n#       send [ 'tex', \" & \", ]\n#       #.....................................................................................................\n#       # MIDASHI\n#       #.....................................................................................................\n#       glyph = details[ 'glyph' ]\n#       send [ 'tex', \"{\\\\mktsStyleMidashi{}\\\\sbSmash{\", ]\n#       send [ '.', 'text', \"#{glyph}\", ( copy meta ), ]\n#       send [ 'tex', \"}}\", ]\n#       #.....................................................................................................\n#       send [ 'tex', \" & \", ]\n#       #.....................................................................................................\n#       # STRUT\n#       #.....................................................................................................\n#       send [ 'tex', \"{\\\\color{white} | |}\", ]\n#       #.....................................................................................................\n#       send [ 'tex', \" & \", ]\n#       #.....................................................................................................\n#       value = details[ 'formula' ]\n#       if value? and value.length > 0\n#         value = value[ 0 ]\n#         # send [ 'tex', \"{\\\\mktsStyleFormula{}\", ]\n#         send [ '.', 'text', value, ( copy meta ), ]\n#         # send [ 'tex', \"} \", ]\n#       #.....................................................................................................\n#       value = details[ 'cp/fncr' ]\n#       value = value.replace /-/g, '·'\n#       send [ 'tex', \"{\\\\mktsStyleFncr{}\", ]\n#       send [ '.', 'text', value, ( copy meta ), ]\n#       send [ 'tex', \"}\\n\", ]\n#       #.....................................................................................................\n#       count = 0\n#       for key in [ 'reading/py', 'reading/hg', 'reading/ka', 'reading/hi', 'reading/gloss', ]\n#         value     = details[ key ]\n#         continue unless value?\n#         value_txt = if CND.isa_text value then value else rpr value\n#         text      = \"#{value_txt}\"\n#         send [ '.', 'text', '; \\n', ( copy meta ), ] unless count is 0\n#         send [ 'tex', \"{\\\\mktsStyleGloss{}\", ]  if key is 'reading/gloss'\n#         send [ '.', 'text', text, ( copy meta ), ]\n#         send [ 'tex', \"}\", ]                    if key is 'reading/gloss'\n#         count += +1\n#       send [ '.', 'text', '.', ( copy meta ), ] unless count is 0\n#       #.....................................................................................................\n#       if ( value = details[ 'variant' ] )?\n#         value = value.join ''\n#         send [ '.', 'text', \" #{value}\", ( copy meta ), ]\n#       #.....................................................................................................\n#       send [ 'tex', \"\\\\\\\\\\n\\\\hline\\n\", ]\n#       send [ 'tex', \"\\\\end{tabular}\\n\", ]\n#       send [ '.', 'p', null, ( copy meta ), ]\n#     #.......................................................................................................\n#     else\n#       send event\n\n# #-----------------------------------------------------------------------------------------------------------\n# @$dump_db = ( S ) =>\n#   return $ ( event, send ) =>\n#     if select event, '!', 'JZR.dump_db'\n#       [ _, _, parameters, meta ]    = event\n#       [ settings ] = parameters\n#       # send [ '.', 'text', ( rpr settings ), ( copy meta ), ]\n#       if ( glyphs = settings[ 'glyphs' ] )?\n#         glyphs  = MKTS.XNCHR.chrs_from_text glyphs if CND.isa_text glyphs\n#         tasks   = []\n#         send [ '(', 'dump-db', glyphs, ( copy meta ), ]\n#         send [ '.', 'glyph', glyph, ( copy meta ), ] for glyph in glyphs\n#         send [ ')', 'dump-db', glyphs, ( copy meta ), ]\n#       else\n#         send [ '.', 'warning', \"expected setting 'glyphs' in call to `JZR.dump_db`\", ( copy meta ), ]\n#     else\n#       send event\n\n# #-----------------------------------------------------------------------------------------------------------\n# @$dump_db.$format = ( S ) =>\n#   track     = MD_READER.TRACKER.new_tracker '(dump-db)'\n#   excludes  = [\n#     'guide/kwic/v1/lineup/wrapped/infix'\n#     'guide/kwic/v1/lineup/wrapped/prefix'\n#     'guide/kwic/v1/lineup/wrapped/single'\n#     'guide/kwic/v1/lineup/wrapped/suffix'\n#     'guide/kwic/v1/sortcode'\n#     'guide/kwic/v2/lineup/wrapped/single'\n#     'guide/kwic/v2/sortcode'\n#     ]\n#   #.........................................................................................................\n#   return $ ( event, send ) =>\n#     within_dumpdb = track.within '(dump-db)'\n#     track event\n#     #.......................................................................................................\n#     if within_dumpdb and select event, '.', 'details'\n#       [ _, _, details, meta, ]  = event\n#       send stamp event\n#       { glyph } = details\n#       delete details[ 'glyph' ]\n#       last_idx  = ( Object.keys details ).length - 1\n#       idx       = -1\n#       #.....................................................................................................\n#       # send [ '(', 'h', 3, ( copy meta ), ]\n#       send [ '.', 'p', null, ( copy meta ), ]\n#       send [ '.', 'text', \"Details for Glyph #{glyph} #{details[ 'cp/fncr' ]}\", ( copy meta ), ]\n#       send [ '.', 'p', null, ( copy meta ), ]\n#       #.....................................................................................................\n#       for predicate, value of details\n#         idx += +1\n#         continue if predicate in excludes\n#         value_txt = JSON.stringify value, null, ' '\n#         send [ 'tex', \"\\\\begin{tabular}{ | p{30mm} | p{129mm} | }\\n\", ]\n#         send [ 'tex', \"\\\\hline\\n\", ] if idx is 0\n#         send [ 'tex', \"{\\\\mktsStyleFontUrl{}\", ]\n#         send [ '.', 'text', \"#{predicate}\", ( copy meta ), ]\n#         send [ 'tex', \"}\", ]\n#         send [ 'tex', \" & \", ( copy meta ), ]\n#         send [ '.', 'text', \"#{value_txt}\", ( copy meta, 'typofix': 'escape-ncrs' ), ]\n#         send [ 'tex', \"\\\\\\\\\\n\", ( copy meta ), ]\n#         send [ 'tex', \"\\\\hline\\n\", ] if idx is last_idx\n#         send [ 'tex', \"\\\\end{tabular}\\n\", ]\n#       #.....................................................................................................\n#       send [ '.', 'p', null, ( copy meta ), ]\n#     #.......................................................................................................\n#     else if select event, '(', 'dump-db'\n#       send stamp event\n#     #.......................................................................................................\n#     else if select event, ')', 'dump-db'\n#       send stamp event\n#     #.......................................................................................................\n#     else\n#       send event\n\n\n\n# #===========================================================================================================\n# # PINYIN (EXPERIMENTAL, INCOMPLETE)\n# #-----------------------------------------------------------------------------------------------------------\n# @$py = ( S ) =>\n#   ### TAINT should translate special syntax to ordinary commands, then translate to TeX ###\n#   # track   = MD_READER.TRACKER.new_tracker '(py)'\n#   # remark  = MD_READER._get_remark()\n#   ### TAINT make RegEx more specific, don't include punctuation ###\n#   py_pattern = /// !py!([^\\s]+) ///\n#   compile_pinyin = ( text ) =>\n#     return text.replace py_pattern, ( $0, $1 ) =>\n#       ### TAINT translate digits to accents ###\n#       ### TAINT consider to use fix_typography_for_tex ###\n#       return \"{\\\\py{}#{$1}}\"\n#   #.........................................................................................................\n#   return $ ( event, send ) =>\n#     # within_py = track.within '(py)'\n#     # track event\n#     [ type, name, text, meta, ] = event\n#     #.......................................................................................................\n#     # if within_py and text?\n#     if select event, '(', 'py'\n#       send stamp event\n#       send [ 'tex', \"{\\\\py{}\", ]\n#     #.......................................................................................................\n#     else if select event, ')', 'py'\n#       send stamp event\n#       send [ 'tex', \"}\", ]\n#     #.......................................................................................................\n#     else if select event, '.', 'text'\n#       send [ '.', 'text', ( compile_pinyin text ), ( copy meta ), ]\n#     #.......................................................................................................\n#     else\n#       send event\n\n\n\n\n\n\n\n\n\n"]}